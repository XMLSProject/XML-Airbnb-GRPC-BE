version: "3.8"

services:
  greeter_service:
    image: greeter_service
    container_name: greeter_service
    hostname: greeter_service
    build:
      context: ./greeter-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      GREETER_SERVICE_ADDRESS: ${GREETER_SERVICE_ADDRESS}
    networks:
      - network
      
  login_service:
    image: login_service
    container_name: login_service
    hostname: login_service
    build:
      context: ./login-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      LOGIN_DB_HOST: ${LOGIN_DB_HOST}
      LOGIN_DB_PORT: ${LOGIN_DB_PORT}
      LOGIN_SERVICE_PORT: ${LOGIN_SERVICE_PORT}
      # MONGO_DB_URI: mongodb://root:pass@mongo:27017
      # LOGIN_SERVICE_ADDRESS: ${LOGIN_SERVICE_ADDRESS}
    depends_on:
      - login_db
    networks:
      - network
  reservation_service:
    image: reservation_service
    container_name: reservation_service
    hostname: reservation_service
    build:
      context: ./reservation-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      RESERVATION_DB_HOST: ${RESERVATION_DB_HOST}
      RESERVATION_DB_PORT: ${RESERVATION_DB_PORT}
      RESERVATION_SERVICE_PORT: ${RESERVATION_SERVICE_PORT}
      # MONGO_DB_URI: mongodb://root:pass@mongo:27017
      # LOGIN_SERVICE_ADDRESS: ${LOGIN_SERVICE_ADDRESS}
    depends_on:
      - reservation_db
    networks:
      - network

  accommodation_service:
    image: accommodation_service
    container_name: accommodation_service
    hostname: accommodation_service
    build:
      context: ./accommodation-service/
      dockerfile: Dockerfile
    restart: always
    environment:
      ACCOMMODATION_DB_HOST: ${ACCOMMODATION_DB_HOST}
      ACCOMMODATION_DB_PORT: ${ACCOMMODATION_DB_PORT}
      ACCOMMODATION_SERVICE_PORT: ${ACCOMMODATION_SERVICE_PORT}
    depends_on:
      - accommodation_db
    networks:
      - network
  

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    hostname: api_gateway
    build:
      context: ./api-gateway/
      dockerfile: Dockerfile
    restart: always
    environment:
      GREETER_SERVICE_ADDRESS: greeter_service:8000
      LOGIN_SERVICE_ADDRESS: login_service:8000
      ACCOMMODATION_SERVICE_ADDRESS: accommodation_service:8000
      GATEWAY_ADDRESS: ${GATEWAY_ADDRESS}
      RESERVATION_SERVICE_ADDRESS: reservation_service:8000
    depends_on:
      - greeter_service
      - login_service
      - accommodation_service
      - reservation_service
    networks:
      - network
    ports:
      - "8000:8000"

  login_db:
    image: mongo
    container_name: login_db
    restart: on-failure
    ports:
      - "9000:27017"
    networks:
      - network

  reservation_db:
    image: mongo
    container_name: reservation_db
    restart: on-failure
    ports:
      - "9002:27017"
    networks:
      - network

  accommodation_db:
    image: mongo
    container_name: accommodation_db
    restart: on-failure
    ports:
      - "9001:27017"
    networks:
      - network


  #NoSQL: MongoDB
  # mongo:
  #   image: mongo
  #   restart: always
  #   ports:
  #     - "9000:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: root
  #     MONGO_INITDB_ROOT_PASSWORD: pass
  #     MONGO_INITDB_DATABASE: mongoDemo
  #   # Docker healtcheck - checks if database is "alive"
  #   healthcheck:
  #     test: echo 'db.runCommand("ping").ok'
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10

networks:
  network:
    driver: bridge

