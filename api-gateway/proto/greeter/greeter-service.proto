syntax = "proto3";

option go_package = "proto/greeter";

import "google/api/annotations.proto";

service GreeterService {
  rpc Greet(Request) returns (Response) {
    option (google.api.http) = {
      post: "/"
      body: "*"
    };
  }

  rpc GreetTest(Request) returns (Response) {
    option (google.api.http) = {
      get: "/"
    };
  }
}

service ReservationService {
  rpc GreetFromReservation(Request) returns (Response) {
    option (google.api.http) = {
      post: "/reservation"
      body: "*"
    };
  }
  rpc Reserve(RequestForReserve) returns (ResponseForReserve) {
    option (google.api.http) = {
      post: "/makeReservation"
      body: "reserve"
    };
  }
  rpc DeleteReservation(RequestDeleteReservation) returns (ResponseDeleteReservation) {
    option (google.api.http) = {
      post: "/deleteReservation"
      body: "delres"
    };
  }
}

service LoginService {
  rpc GreetFromLogin(Request) returns (Response) {
    option (google.api.http) = {
      post: "/login"
      body: "*"
    };
  }

  rpc GreetFromLoginTest(Request) returns (Response) {
    option (google.api.http) = {
      get: "/login"
    };
  }
   rpc CreateUser(CreateUserRequest) returns (CreateUserResponse)
   {
      option (google.api.http) = {
        post: "/register"
        body: "reg"
      };
   }
   rpc Login(LoginRequest) returns (LoginResponse)
   {
      option (google.api.http) = {
        post: "/loginInfo"
        body: "logg"
      };
   }
   rpc UpdateUser(UpdateRequest) returns (UpdateResponse)
   {
      option (google.api.http) = {
        post: "/updateUser"
        body: "upd"
      };
   }
   rpc DeleteUser(DeleteRequest) returns (DeleteResponse)
   {
      option (google.api.http) = {
        post: "/deleteUser"
        body: "dlt"
      };
   }
}
message DeleteRequest {
  string dlt = 3;
}
message DeleteResponse {
  string dlt = 4;
}
message RequestForReserve {
  ReserveInfo reserve = 3;
}
message ResponseForReserve {
  string reserve = 4;
}
message RequestDeleteReservation {
  string delres = 3;
}
message ResponseDeleteReservation {
  string delres = 4;
}
message ReserveInfo {
        string fromDate = 2;
        string toDate = 3;
        int32 guestNumber = 4;
        string accommodation = 5;
        string accepted = 6;
}
message UpdateRequest {
  UpdateInfo upd = 3;
}
message UpdateResponse {
  UpdateInfo upd = 4;
}
message UpdateInfo {
        string name = 2;
        string surname = 3;
        string username = 4;
        string password = 5;
        string email = 6;
}
message LoginRequest {
  LoginInfo logg = 3;
}
message LoginResponse {
  string token = 4;
}
message LoginInfo {
        string username = 3;
        string password = 4;
}
message CreateUserRequest {
  User reg = 3;
}
message CreateUserResponse {
  User reg = 4;
}
message User {
        string id = 1;
        string name = 2;
        string surname = 3;
        string username = 4;
        string password = 5;
        string email = 6;
}

service AccommodationService {
  rpc GreetFromAccommodation(Request) returns (Response) {
    option (google.api.http) = {
      post: "/accommodation"
      body: "*"
    };
  }

  rpc CreateAccommodation(CreateAccommodationRequest) returns (CreateAccommodationResponse) {
    option (google.api.http) = {
        post: "/createAcco"
        body: "reg"
      };
  }

  rpc EditAccommodation(EditAccoRequest) returns (EditAccoResponse)
   {
      option (google.api.http) = {
        post: "/editAcco"
        body: "edit"
      };
   }
}

message CreateAccommodationRequest {
  Accommodation reg = 1;
} 

message CreateAccommodationResponse {
  Accommodation reg = 1;
}

message Accommodation {
  string id = 1;
  string name = 2;
  string location = 3;
  string benefits = 4;
  repeated string photos = 5;
  int32 minGuests = 6;
  int32 maxGuests = 7;
}

message Request {
  string name = 1;
}

message Response {
  string greeting = 2;
}

message EditAccoRequest {
  EditAccoInfo edit = 1;
}
message EditAccoResponse {
  EditAccoInfo edit = 1;
}

message EditAccoInfo {
  string accoId = 1;
  string availableFrom = 2;
  string availableTo = 3;
  float price = 4;
  bool isPricePerGuest = 5;
}

